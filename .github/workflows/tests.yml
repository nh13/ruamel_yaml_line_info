name: Code checks

on:
  push:
    branches:
      - "**"
    tags:
      - "!**"
  workflow_call:

env:
  POETRY_VERSION: 2.1.1

jobs:
  Tests:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        PYTHON_VERSION: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.PYTHON_VERSION }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo "version=$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")" >> $GITHUB_OUTPUT

      - name: Install poetry
        run: |
          python -m pip install --upgrade pipx
          pipx install poetry==${{env.POETRY_VERSION}}

      - name: Set up cache
        uses: actions/cache@v4
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}
  
      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install the library
        run: poetry install -v || poetry install -vvv

      - name: Install the task runner poethepoet
        run: poetry self add 'poethepoet[poetry_plugin]'

      - name: Test the library
        run: poetry task check-all

      - name: Upload code coverage
        uses: codecov/codecov-action@v4.5.0
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
